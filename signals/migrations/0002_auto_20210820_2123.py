# Generated by Django 3.1.12 on 2021-08-20 16:53

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_auto_20210801_1058'),
        ('signals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EntryPrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_price', models.FloatField(blank=True, null=True)),
                ('max_price', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TakeProfit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(blank=True, null=True)),
                ('level', models.IntegerField(default=1)),
            ],
        ),
        migrations.RemoveField(
            model_name='futuresignal',
            name='buy_position',
        ),
        migrations.RemoveField(
            model_name='futuresignal',
            name='entry_price',
        ),
        migrations.RemoveField(
            model_name='futuresignal',
            name='take_profit',
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='isin_next_level',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='order_status',
            field=models.CharField(blank=True, choices=[('NEW', 'NEW'), ('PARTIALLY_FILLED', 'PARTIALLY_FILLED'), ('FILLED', 'FILLED'), ('CANCELED', 'CANCELED'), ('PENDING_CANCEL', 'PENDING_CANCEL'), ('REJECTED', 'REJECTED'), ('EXPIRED', 'EXPIRED'), ('EXECUTING', 'EXECUTING'), ('ALL_DONE', 'ALL_DONE'), ('REJECT', 'REJECT')], max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='order_type',
            field=models.CharField(blank=True, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='position',
            field=models.CharField(blank=True, max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='side',
            field=models.CharField(blank=True, choices=[('BUY', 'BUY'), ('SELL', 'SELL')], max_length=32, null=True),
        ),
        migrations.CreateModel(
            name='SpotSignal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol_name', models.CharField(blank=True, max_length=32, null=True)),
                ('stop_loss', models.FloatField(blank=True, null=True)),
                ('volume', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_prices', models.ManyToManyField(blank=True, related_name='spot_signals', to='signals.EntryPrice')),
                ('take_profits', models.ManyToManyField(blank=True, related_name='spot_signals', to='signals.TakeProfit')),
                ('telegram_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.telegramuser')),
            ],
        ),
        migrations.CreateModel(
            name='SpotOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_id', models.IntegerField(blank=True, null=True)),
                ('symbol_name', models.CharField(blank=True, max_length=32, null=True)),
                ('price', models.FloatField(blank=True, null=True)),
                ('stop_loss', models.FloatField(blank=True, null=True)),
                ('take_profit', models.FloatField(blank=True, null=True)),
                ('volume', models.FloatField(blank=True, null=True)),
                ('type', models.CharField(blank=True, max_length=32, null=True)),
                ('status', models.CharField(blank=True, choices=[('NEW', 'NEW'), ('PARTIALLY_FILLED', 'PARTIALLY_FILLED'), ('FILLED', 'FILLED'), ('CANCELED', 'CANCELED'), ('PENDING_CANCEL', 'PENDING_CANCEL'), ('REJECTED', 'REJECTED'), ('EXPIRED', 'EXPIRED'), ('EXECUTING', 'EXECUTING'), ('ALL_DONE', 'ALL_DONE'), ('REJECT', 'REJECT')], max_length=32, null=True)),
                ('side', models.CharField(blank=True, choices=[('BUY', 'BUY'), ('SELL', 'SELL')], max_length=32, null=True)),
                ('isin_next_level', models.BooleanField(default=False)),
                ('priority', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('spot_signal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.spotsignal')),
            ],
        ),
        migrations.CreateModel(
            name='SpotControler',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_orders', models.ManyToManyField(related_name='first_orders', to='signals.SpotOrder')),
                ('second_orders', models.ManyToManyField(related_name='second_orders', to='signals.SpotOrder')),
                ('spot_signal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='signals.spotsignal')),
            ],
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='entry_prices',
            field=models.ManyToManyField(blank=True, related_name='future_signals', to='signals.EntryPrice'),
        ),
        migrations.AddField(
            model_name='futuresignal',
            name='take_profits',
            field=models.ManyToManyField(blank=True, related_name='future_signals', to='signals.TakeProfit'),
        ),
    ]
